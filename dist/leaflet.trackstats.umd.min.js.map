{"version":3,"file":"leaflet.trackstats.umd.min.js","sources":["../src/cache.js","../src/stats.js","../src/stats.polyline.js","../src/stats.trackdrawer.js","../node_modules/@babel/runtime/helpers/arrayLikeToArray.js","../node_modules/@babel/runtime/helpers/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/iterableToArray.js","../node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js","../node_modules/@babel/runtime/helpers/nonIterableSpread.js","../node_modules/@babel/runtime/helpers/toConsumableArray.js","../src/geoportail.js","../src/mapquest.js","../src/index.js"],"sourcesContent":["const metadatas = {};\nlet precision = 8;\n\n// Rounds to X decimals (IGN API supports up to 8, MapQuest up to 5)\nif (typeof Math.roundE === 'undefined') {\n  Math.roundE = function roundE(value, decimals) {\n    const pow = 10 ** decimals;\n    return Math.round(value * pow) / pow;\n  };\n}\n\nfunction getKeyLatLng(lat, lng, decimals) {\n  return `${Math.roundE(lng, decimals)}/${Math.roundE(lat, decimals)}`;\n}\n\nfunction getKey(coords, decimals) {\n  return getKeyLatLng(coords.lat, coords.lng, decimals);\n}\n\nmodule.exports = {\n  setPrecision(p) {\n    precision = p;\n    return this;\n  },\n\n  add(t, coords) {\n    const key = getKey(coords, precision);\n    if (!(key in metadatas)) metadatas[key] = {};\n\n    metadatas[key][t] = coords[t];\n\n    return this;\n  },\n  get(t, coords) {\n    const key = getKey(coords, precision);\n    return key in metadatas && t in metadatas[key] ? metadatas[key][t] : undefined;\n  },\n\n  has(t, coords) {\n    const key = getKey(coords, precision);\n    return key in metadatas && (t === null || t in metadatas[key]);\n  },\n  hasZ(coords) {\n    return this.has('z', coords);\n  },\n  hasSlope(coords) {\n    return this.has('slope', coords);\n  },\n\n  addZ(coords) {\n    this.add('z', coords);\n    return this;\n  },\n  addSlope(coords) {\n    this.add('slope', coords);\n    return this;\n  },\n\n  getAll(coords) {\n    const key = getKey(coords, precision);\n    const md = key in metadatas ? metadatas[key] : {};\n\n    return {\n      lat: coords.lat,\n      lng: coords.lng,\n      z: 'z' in md ? md.z : undefined,\n      slope: 'slope' in md ? md.slope : undefined,\n    };\n  },\n\n  clear() {\n    Object.keys(metadatas).forEach((x) => delete metadatas[x]);\n    return this;\n  },\n};\n","const L = require('leaflet');\n\nconst stats = L.Class.extend({\n  options: {},\n\n  initialize(latlngs, options) {\n    L.Util.setOptions(this, options);\n\n    this.startingDistance = 0;\n    this.distance = 0;\n    this.altMin = Number.MAX_VALUE;\n    this.altMax = Number.MIN_VALUE;\n    this.heightDiffUp = 0;\n    this.heightDiffDown = 0;\n    this.slopeMin = Number.MAX_VALUE;\n    this.slopeMax = Number.MIN_VALUE;\n    this.slopeTerrainMin = Number.MAX_VALUE;\n    this.slopeTerrainMax = Number.MIN_VALUE;\n    this.latlngs = [];\n\n    if (latlngs.length === 0) {\n      return;\n    }\n\n    const elevations = JSON.parse(JSON.stringify(latlngs)); // deep copy\n\n    this.altMin = elevations[0].z;\n    this.altMax = elevations[0].z;\n    this.slopeTerrainMin = elevations[0].slope;\n    this.slopeTerrainMax = elevations[0].slope;\n\n    elevations[0].dist = 0;\n    elevations[0].slopeOnTrack = 0;\n\n    this.latlngs.push(elevations[0]);\n\n    let j = 0;\n    for (let i = 1; i < elevations.length; i += 1) {\n      const localDistance = L.latLng(elevations[i]).distanceTo(L.latLng(this.latlngs[j])); // m\n      if (localDistance > 0) {\n        this.distance += localDistance / 1000; // km\n\n        j += 1;\n        this.latlngs[j] = elevations[i];\n        const current = this.latlngs[j];\n\n        current.dist = this.distance;\n\n        if (current.z) {\n          if (current.z < this.altMin) this.altMin = current.z;\n          if (current.z > this.altMax) this.altMax = current.z;\n\n          const altDiff = current.z - this.latlngs[j - 1].z;\n\n          if (altDiff < 0) {\n            this.heightDiffDown += Math.round(-altDiff);\n          } else if (altDiff > 0) {\n            this.heightDiffUp += Math.round(altDiff);\n          }\n          // else can happen if some data is missing, we choose to ignore it\n\n          current.slopeOnTrack = Math.round(Math.degrees(Math.atan(altDiff / localDistance)));\n        } else {\n          current.slopeOnTrack = 0;\n        }\n\n        if (current.slope) {\n          if (current.slope < this.slopeTerrainMin) this.slopeTerrainMin = current.slope;\n          if (current.slope > this.slopeTerrainMax) this.slopeTerrainMax = current.slope;\n        }\n      }\n    }\n\n    const size = this.latlngs.length;\n    for (let i = 0; i < size; i += 1) {\n      if (i > 3 && i < size - 4) {\n        this.latlngs[i].slopeOnTrack = (this.latlngs[i - 3].slopeOnTrack\n            + 2 * this.latlngs[i - 2].slopeOnTrack\n            + 4 * this.latlngs[i - 1].slopeOnTrack\n            + 8 * this.latlngs[i].slopeOnTrack\n            + 4 * this.latlngs[i + 1].slopeOnTrack\n            + 2 * this.latlngs[i + 2].slopeOnTrack\n            + this.latlngs[i + 3].slopeOnTrack)\n          / 22;\n\n        if (this.latlngs[i].slopeOnTrack < this.slopeMin) this.slopeMin = this.latlngs[i].slopeOnTrack;\n        if (this.latlngs[i].slopeOnTrack > this.slopeMax) this.slopeMax = this.latlngs[i].slopeOnTrack;\n      }\n    }\n\n    if (this.altMin === undefined) {\n      this.heightDiffUp = undefined;\n      this.heightDiffDown = undefined;\n      this.slopeMax = undefined;\n      this.slopeMin = undefined;\n    }\n  },\n\n  accumulate(accumulator) {\n    accumulator.latlngs = accumulator.latlngs.concat(\n      this.getLatLngs().map((x) => {\n        x.dist += accumulator.distance;\n        return x;\n      }),\n    );\n\n    accumulator.distance += this.distance;\n    accumulator.altMin = Math.min(this.altMin, accumulator.altMin);\n    accumulator.altMax = Math.max(this.altMax, accumulator.altMax);\n    accumulator.heightDiffUp += this.heightDiffUp;\n    accumulator.heightDiffDown += this.heightDiffDown;\n    accumulator.slopeMin = Math.min(this.slopeMin, accumulator.slopeMin);\n    accumulator.slopeMax = Math.max(this.slopeMax, accumulator.slopeMax);\n    accumulator.slopeTerrainMin = Math.min(this.slopeTerrainMin, accumulator.slopeTerrainMin);\n    accumulator.slopeTerrainMax = Math.max(this.slopeTerrainMax, accumulator.slopeTerrainMax);\n\n    return this;\n  },\n\n  getLatLngs() {\n    return JSON.parse(JSON.stringify(this.latlngs)); // deep copy\n  },\n  getDistance() {\n    return this.distance;\n  },\n  getAltMin() {\n    return this.altMin;\n  },\n  getAltMax() {\n    return this.altMax;\n  },\n  getSlopeMin() {\n    return this.slopeMin;\n  },\n  getSlopeMax() {\n    return this.slopeMax;\n  },\n  getHeightDiffUp() {\n    return this.heightDiffUp;\n  },\n  getHeightDiffDown() {\n    return this.heightDiffDown;\n  },\n  getSlopeTerrainMin() {\n    return this.slopeTerrainMin;\n  },\n  getSlopeTerrainMax() {\n    return this.slopeTerrainMax;\n  },\n});\n\nmodule.exports = stats;\n","const L = require('leaflet');\nconst cache = require('./cache');\nconst Stats = require('./stats');\n\nif (typeof Math.degrees === 'undefined') {\n  // Converts from radians to degrees.\n  Math.degrees = function degrees(radians) {\n    return (radians * 180) / Math.PI;\n  };\n}\n\nfunction getLatLngsFlatten(polyline) {\n  const latlngs = polyline.getLatLngs();\n\n  if (latlngs.length > 0 && Array.isArray(latlngs[0])) {\n    let result = [];\n    for (let j = 0; j < latlngs.length; j += 1) {\n      result = result.concat(latlngs[j]);\n    }\n\n    return result;\n  }\n  return latlngs;\n}\n\nL.Polyline.include({\n  _stats: undefined,\n\n  getStats() {\n    return this._stats;\n  },\n\n  fetchAltitude(fetcher, eventTarget) {\n    if (!('altitudes' in fetcher.features) || !fetcher.features.altitudes) {\n      return new Promise((_resolve, reject) => reject(new Error('Unsupported')));\n    }\n\n    cache.setPrecision(fetcher.precision);\n    const latlngs = Array.from(new Set(getLatLngsFlatten(this))).filter((coords) => !cache.hasZ(coords));\n\n    if (latlngs.length === 0) { return new Promise((resolve) => resolve()); }\n\n    if (eventTarget) {\n      eventTarget.fire('TrackStats:fetching', {\n        datatype: 'altitudes',\n        size: latlngs.length,\n      });\n    }\n\n    return new Promise((resolve, reject) => {\n      fetcher.fetchAltitudes(latlngs, eventTarget).then((elevations) => {\n        elevations.forEach((x) => cache.addZ(x));\n\n        if (eventTarget) {\n          eventTarget.fire('TrackStats:done', {\n            datatype: 'altitudes',\n            size: elevations.length,\n          });\n        }\n        resolve();\n      }).catch((e) => reject(e));\n    });\n  },\n\n  fetchSlope(fetcher, eventTarget) {\n    if (!('slopes' in fetcher.features) || !fetcher.features.slopes) {\n      return new Promise((_resolve, reject) => reject(new Error('Unsupported')));\n    }\n\n    cache.setPrecision(fetcher.precision);\n    const latlngs = Array.from(new Set(getLatLngsFlatten(this))).filter((coords) => !cache.hasSlope(coords));\n\n    if (latlngs.length === 0) { return new Promise((resolve) => resolve()); }\n\n    if (eventTarget) {\n      eventTarget.fire('TrackStats:fetching', {\n        datatype: 'slopes',\n        size: latlngs.length,\n      });\n    }\n\n    return new Promise((resolve, reject) => {\n      fetcher.fetchSlopes(latlngs, eventTarget).then((slopes) => {\n        slopes.forEach((x) => cache.addSlope(x));\n\n        if (eventTarget) {\n          eventTarget.fire('TrackStats:done', {\n            datatype: 'slopes',\n            size: slopes.length,\n          });\n        }\n        resolve();\n      }).catch((e) => reject(e));\n    });\n  },\n\n  fetchInfos(fetcher, eventTarget) {\n    const promises = [];\n    if ('altitudes' in fetcher.features && fetcher.features.altitudes) {\n      promises.push(this.fetchAltitude(fetcher, eventTarget));\n    }\n    if ('slopes' in fetcher.features && fetcher.features.slopes) {\n      promises.push(this.fetchSlope(fetcher, eventTarget));\n    }\n\n    return Promise.all(promises);\n  },\n\n  computeStats() {\n    const latlngs = getLatLngsFlatten(this).map((coords) => coords.getCachedInfos());\n    this._stats = new Stats(latlngs);\n    return this.getStats();\n  },\n});\n\nL.LatLng.prototype.getCachedInfos = function getCachedInfos() {\n  return cache.getAll(this);\n};\n","const L = require('leaflet');\nconst Stats = require('./stats');\n\nif (L.TrackDrawer !== undefined) {\n  L.TrackDrawer.Track.include({\n    _steps: undefined,\n    _total: undefined,\n    _i: 0,\n\n    _bindEvent() {\n      this.on('TrackDrawer:start', () => {\n        this._i += 1;\n      });\n      this.on('TrackDrawer:failed', (e) => {\n        this._i -= 1;\n        if (this._fireEvents) this.fire('TrackDrawer:statsfailed', { message: e.message });\n      });\n      this.on('TrackDrawer:done', () => {\n        this._finalizeRoute(this.options.fetcher).catch((e) => {\n          this._i -= 1;\n          if (this._fireEvents) this.fire('TrackDrawer:statsfailed', { message: e.message });\n        });\n      });\n    },\n\n    _finalizeRoute(fetcher) {\n      const routes = [];\n\n      let currentNode = this._getNode(this._firstNodeId);\n\n      this._nodesContainers.forEach(() => {\n        do {\n          const { nextEdge, nextNode } = this._getNext(currentNode);\n          if (currentNode === undefined || nextEdge === undefined) {\n            break;\n          }\n\n          routes.push(nextEdge);\n\n          currentNode = nextNode;\n        } while (currentNode.options.type !== 'stopover');\n      });\n\n      return new Promise((resolve, reject) => {\n        const promises = [];\n        routes.forEach((r) => {\n          promises.push(r.fetchInfos(fetcher, this).then(() => r.computeStats()));\n        });\n\n        Promise.all(promises).then(() => {\n          this._i -= 1;\n          if (this._i === 0) {\n            // Compute stats only if this._i is back to 0 (otherwise the track is out-of-date)\n            this._computeStats();\n          }\n          resolve();\n        }).catch((e) => reject(e));\n      });\n    },\n\n    getStatsTotal() {\n      return this._total;\n    },\n    getStatsSteps() {\n      return this._steps;\n    },\n\n    _computeStats() {\n      this._steps = [];\n      this._total = new Stats([]);\n      let local = new Stats([]);\n\n      let currentNode = this._getNode(this._firstNodeId);\n\n      if (currentNode !== undefined) {\n        this._nodesContainers.forEach((nodeContainer, idx) => {\n          currentNode._stats = {\n            startingDistance: local.getDistance(),\n            distance: this._total.getDistance(),\n            z: currentNode.getLatLng().getCachedInfos().z,\n          };\n\n          local = new Stats([]);\n          local.startingDistance = this._total.getDistance();\n\n          do {\n            const { nextEdge, nextNode } = this._getNext(currentNode);\n            if (currentNode === undefined || nextEdge === undefined) {\n              break;\n            }\n\n            const stats = nextEdge.getStats();\n            if (stats !== undefined) {\n              stats.accumulate(this._total).accumulate(local);\n            }\n            currentNode = nextNode;\n\n            currentNode._stats = {\n              startingDistance: local.getDistance(),\n              distance: this._total.getDistance(),\n              z: currentNode.getLatLng().getCachedInfos().z,\n            };\n          } while (currentNode.options.type !== 'stopover');\n\n          const edgeContainer = this._edgesContainers.get(idx);\n          edgeContainer._stats = local;\n          this._steps.push(local);\n        });\n      }\n\n      if (this._fireEvents) this.fire('TrackDrawer:statsdone', {});\n\n      return this;\n    },\n  });\n\n  L.TrackDrawer.Track.addInitHook('_bindEvent');\n}\n","function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nmodule.exports = _arrayLikeToArray;","var arrayLikeToArray = require(\"./arrayLikeToArray\");\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}\n\nmodule.exports = _arrayWithoutHoles;","function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nmodule.exports = _iterableToArray;","var arrayLikeToArray = require(\"./arrayLikeToArray\");\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}\n\nmodule.exports = _unsupportedIterableToArray;","function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nmodule.exports = _nonIterableSpread;","var arrayWithoutHoles = require(\"./arrayWithoutHoles\");\n\nvar iterableToArray = require(\"./iterableToArray\");\n\nvar unsupportedIterableToArray = require(\"./unsupportedIterableToArray\");\n\nvar nonIterableSpread = require(\"./nonIterableSpread\");\n\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}\n\nmodule.exports = _toConsumableArray;","const L = require('leaflet');\nconst Gp = require('geoportal-access-lib');\nconst corslite = require('@mapbox/corslite');\nconst Queue = require('promise-queue');\n\nfunction latLngToTilePixel(latlng, crs, zoom, tileSize, pixelOrigin) {\n  const layerPoint = crs.latLngToPoint(latlng, zoom).floor();\n  const tile = layerPoint.divideBy(tileSize).floor();\n  const tileCorner = tile.multiplyBy(tileSize).subtract(pixelOrigin);\n  const tilePixel = layerPoint.subtract(pixelOrigin).subtract(tileCorner);\n  return { tile, tilePixel };\n}\n\nmodule.exports = L.Class.extend({\n  options: {\n    queueConcurrency: 5,\n  },\n\n  initialize(apiKey, map, options) {\n    this._apiKey = apiKey;\n    this._map = map;\n    this.features = { altitudes: true, slopes: true };\n    this.precision = 8;\n    L.Util.setOptions(this, options);\n    this._queue = new Queue(this.options.queueConcurrency, Infinity);\n  },\n\n  fetchAltitudes(latlngs, eventTarget) {\n    const geometry = [];\n    const promises = [];\n\n    latlngs.forEach((coords) => {\n      geometry.push({\n        lon: coords.lng,\n        lat: coords.lat,\n      });\n      if (geometry.length === 50) {\n        // Launch batch\n        const g = geometry.splice(0);\n        promises.push(this._queue.add(() => this._fetchBatchAltitude(g, eventTarget)));\n      }\n    });\n\n    if (geometry.length > 0) {\n      // Launch last batch\n      const g = geometry.splice(0);\n      promises.push(this._queue.add(() => this._fetchBatchAltitude(g, eventTarget)));\n    }\n\n    return new Promise((resolve, reject) => {\n      Promise.all(promises).then((data) => {\n        const results = [];\n        data.forEach((x) => results.push(...x));\n        resolve(results);\n      }).catch((e) => reject(e));\n    });\n  },\n\n  _doFetchBatchAltitude(geometry, eventTarget, resolve, reject, retry) {\n    Gp.Services.getAltitude({\n      apiKey: this._apiKey,\n      sampling: geometry.length,\n      positions: geometry,\n      onSuccess: (result) => {\n        const elevations = [];\n        result.elevations.forEach((val) => {\n          elevations.push({ lat: val.lat, lng: val.lon, z: val.z });\n        });\n\n        if (eventTarget) {\n          eventTarget.fire('TrackStats:fetched', {\n            datatype: 'altitudes',\n            size: elevations.length,\n          });\n        }\n\n        resolve(elevations);\n      },\n      onFailure: (error) => {\n        if (retry) {\n          this._doFetchBatchAltitude(geometry, eventTarget, resolve, reject, false);\n        } else {\n          reject(new Error(error.message));\n        }\n      },\n    });\n  },\n\n  _fetchBatchAltitude(geometry, eventTarget) {\n    return new Promise((resolve, reject) => {\n      this._doFetchBatchAltitude(geometry, eventTarget, resolve, reject, true);\n    });\n  },\n\n  fetchSlopes(latlngs, eventTarget) {\n    const tiles = {};\n    const promises = [];\n    const crs = this._map ? this._map.options.crs : this.options.crs || L.CRS.EPSG3857;\n    const pixelOrigin = this._map ? this._map.getPixelOrigin() : this.options.pixelOrigin;\n\n    latlngs.forEach((coords) => {\n      const { tile, tilePixel } = latLngToTilePixel(coords, crs, 16, 256, pixelOrigin);\n\n      if (!(tile.x in tiles)) tiles[tile.x] = {};\n      if (!(tile.y in tiles[tile.x])) tiles[tile.x][tile.y] = [[]];\n\n      const arr = tiles[tile.x][tile.y];\n\n      if (arr[arr.length - 1].length > 50) arr.push([]);\n\n      arr[arr.length - 1].push({\n        lat: coords.lat,\n        lng: coords.lng,\n        x: tilePixel.x,\n        y: tilePixel.y,\n      });\n    });\n\n    Object.keys(tiles).forEach((x) => {\n      Object.keys(tiles[x]).forEach((y) => {\n        tiles[x][y].forEach((batch) => {\n          promises.push(this._queue.add(() => this._fetchBatchSlope(x, y, batch, eventTarget)));\n        });\n      });\n    });\n\n    return new Promise((resolve, reject) => {\n      Promise.all(promises).then((data) => {\n        const results = [];\n        data.forEach((x) => results.push(...x));\n        resolve(results);\n      }).catch((e) => reject(e));\n    });\n  },\n\n  _fetchBatchSlope(tilex, tiley, coords, eventTarget) {\n    const tilematrix = 16;\n    const tilerow = tiley;\n    const tilecol = tilex;\n    let lon = '';\n    let lat = '';\n    let x = '';\n    let y = '';\n    const apikey = this._apiKey;\n\n    coords.forEach((coord, idx) => {\n      if (idx > 0) {\n        lon += '|';\n        lat += '|';\n        x += '|';\n        y += '|';\n      }\n\n      lon += coord.lng.toString();\n      lat += coord.lat.toString();\n      x += coord.x.toString();\n      y += coord.y.toString();\n    });\n\n    const url = `slope.php?tilematrix=${tilematrix}&tilerow=${tilerow}&tilecol=${tilecol}`\n      + `&lon=${lon}&lat=${lat}&x=${x}&y=${y}&apikey=${apikey}`;\n\n    return new Promise((resolve, reject) => {\n      corslite(\n        url,\n        (err, resp) => {\n          if (!err) {\n            try {\n              const data = JSON.parse(resp.responseText);\n              if (data.results) {\n                const slopes = [];\n                data.results.forEach((val) => {\n                  slopes.push({ lat: val.lat, lng: val.lon, slope: val.slope });\n                });\n\n                if (eventTarget) {\n                  eventTarget.fire('TrackStats:fetched', {\n                    datatype: 'slopes',\n                    size: slopes.length,\n                  });\n                }\n\n                resolve(slopes);\n              } else {\n                reject(new Error(\"Impossible d'obtenir les données de pentes: résultats invalides\"));\n              }\n            } catch (ex) {\n              reject(ex);\n            }\n          } else {\n            try {\n              const data = JSON.parse(err.responseText);\n              reject(new Error(data.error));\n            } catch (ex) {\n              reject(ex);\n            }\n          }\n        },\n        false,\n      );\n    });\n  },\n});\n","const L = require('leaflet');\nconst corslite = require('@mapbox/corslite');\nconst Queue = require('promise-queue');\n\nmodule.exports = L.Class.extend({\n  options: {\n    queueConcurrency: 5,\n  },\n\n  initialize(apiKey, map, options) {\n    this._apiKey = apiKey;\n    this._map = map;\n    this.features = { altitudes: true, slopes: false };\n    this.precision = 6;\n    L.Util.setOptions(this, options);\n    this._queue = new Queue(this.options.queueConcurrency, Infinity);\n  },\n\n  fetchAltitudes(latlngs, eventTarget) {\n    const geometry = [];\n    const promises = [];\n\n    latlngs.forEach((coords) => {\n      geometry.push({\n        lon: coords.lng,\n        lat: coords.lat,\n      });\n      if (geometry.length === 50) {\n        // Launch batch\n        const g = geometry.splice(0);\n        promises.push(this._queue.add(() => this._fetchBatchAltitude(g, eventTarget)));\n      }\n    });\n\n    if (geometry.length > 0) {\n      // Launch last batch\n      const g = geometry.splice(0);\n      promises.push(this._queue.add(() => this._fetchBatchAltitude(g, eventTarget)));\n    }\n\n    return new Promise((resolve, reject) => {\n      Promise.all(promises).then((data) => {\n        const results = [];\n        data.forEach((x) => results.push(...x));\n        resolve(results);\n      }).catch((e) => reject(e));\n    });\n  },\n\n  _fetchBatchAltitude(geometry, eventTarget) {\n    const latlngs = geometry.map((x) => `${x.lat},${x.lon}`).join(',');\n    const url = 'https://open.mapquestapi.com/elevation/v1/profile?shapeFormat=raw&'\n      + `latLngCollection=${latlngs}&key=${this._apiKey}`;\n\n    return new Promise((resolve, reject) => {\n      corslite(\n        url,\n        (err, resp) => {\n          if (!err) {\n            try {\n              const data = JSON.parse(resp.responseText);\n              const elevations = [];\n              let previous;\n              let hasUndefinedValue = false;\n\n              data.elevationProfile.forEach((val, i) => {\n                if (val.height === -32768) {\n                  // If no height data exists, API returns -32768\n                  // As an approximation, we'll use the previous value\n                  val.height = previous;\n                  if (previous === undefined) hasUndefinedValue = true;\n                }\n\n                elevations.push({ lat: data.shapePoints[i * 2], lng: data.shapePoints[i * 2 + 1], z: val.height });\n                previous = val.height;\n              });\n\n              if (hasUndefinedValue) {\n                // If we're unlucky and no height data exists for the first point(s),\n                // then we approximate to the next value\n                for (let i = elevations.length - 1; i >= 0; i -= 1) {\n                  if (elevations[i].z === undefined) {\n                    elevations[i].z = previous;\n                  }\n                  previous = elevations[i].z;\n                }\n              }\n\n              if (eventTarget) {\n                eventTarget.fire('TrackStats:fetched', {\n                  datatype: 'altitudes',\n                  size: elevations.length,\n                });\n              }\n\n              resolve(elevations);\n            } catch (ex) {\n              reject(ex);\n            }\n          } else {\n            reject(new Error(err.response));\n          }\n        },\n        false,\n      );\n    });\n  },\n\n  fetchSlopes() {\n    return new Promise((_resolve, reject) => {\n      reject(new Error('Unsupported'));\n    });\n  },\n});\n","const L = require('leaflet');\nrequire('./stats.polyline');\nrequire('./stats.trackdrawer');\nconst Stats = require('./stats');\nconst cache = require('./cache');\nconst Geoportail = require('./geoportail');\nconst Mapquest = require('./mapquest');\n\nL.TrackStats = {\n  cache,\n  Geoportail,\n  Mapquest,\n  Stats,\n\n  geoportail(apiKey, map, options) {\n    return new Geoportail(apiKey, map, options);\n  },\n  mapquest(apiKey, map, options) {\n    return new Mapquest(apiKey, map, options);\n  },\n};\n\nmodule.exports = L.TrackStats;\n"],"names":["metadatas","precision","getKey","coords","decimals","lat","lng","Math","roundE","getKeyLatLng","value","pow","round","setPrecision","p","this","add","t","key","get","undefined","has","hasZ","hasSlope","addZ","addSlope","getAll","md","z","slope","clear","Object","keys","forEach","x","L","Class","extend","options","initialize","latlngs","Util","setOptions","startingDistance","distance","altMin","Number","MAX_VALUE","altMax","MIN_VALUE","heightDiffUp","heightDiffDown","slopeMin","slopeMax","slopeTerrainMin","slopeTerrainMax","length","elevations","JSON","parse","stringify","dist","slopeOnTrack","push","j","i","localDistance","latLng","distanceTo","current","altDiff","degrees","atan","size","accumulate","accumulator","concat","getLatLngs","map","min","max","getDistance","getAltMin","getAltMax","getSlopeMin","getSlopeMax","getHeightDiffUp","getHeightDiffDown","getSlopeTerrainMin","getSlopeTerrainMax","getLatLngsFlatten","polyline","Array","isArray","result","radians","PI","Polyline","include","_stats","getStats","fetchAltitude","fetcher","eventTarget","features","altitudes","Promise","_resolve","reject","Error","cache","from","Set","filter","resolve","fire","datatype","fetchAltitudes","then","e","fetchSlope","slopes","fetchSlopes","fetchInfos","promises","all","computeStats","getCachedInfos","Stats","LatLng","prototype","TrackDrawer","Track","_steps","_total","_i","_bindEvent","on","_this","_fireEvents","message","_finalizeRoute","routes","currentNode","_getNode","_firstNodeId","_nodesContainers","_this2","_getNext","nextEdge","nextNode","type","r","_computeStats","getStatsTotal","getStatsSteps","local","nodeContainer","idx","_this3","getLatLng","stats","_edgesContainers","addInitHook","arr","len","arr2","arrayLikeToArray","iter","Symbol","iterator","o","minLen","n","toString","call","slice","constructor","name","test","TypeError","arrayWithoutHoles","iterableToArray","unsupportedIterableToArray","nonIterableSpread","queueConcurrency","apiKey","_apiKey","_map","_queue","Queue","Infinity","geometry","lon","g","splice","_fetchBatchAltitude","data","results","_doFetchBatchAltitude","retry","Gp","Services","getAltitude","sampling","positions","onSuccess","val","onFailure","error","tiles","crs","CRS","EPSG3857","pixelOrigin","getPixelOrigin","latlng","zoom","tileSize","layerPoint","latLngToPoint","floor","tile","divideBy","tileCorner","multiplyBy","subtract","tilePixel","latLngToTilePixel","y","batch","_this4","_fetchBatchSlope","tilex","tiley","tilerow","tilecol","apikey","coord","url","corslite","err","resp","responseText","ex","join","response","previous","hasUndefinedValue","elevationProfile","height","shapePoints","TrackStats","Geoportail","Mapquest","geoportail","mapquest"],"mappings":"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"}