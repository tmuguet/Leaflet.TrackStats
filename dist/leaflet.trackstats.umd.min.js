!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e(require("leaflet"),require("geoportal-access-lib"),require("@mapbox/corslite"),require("promise-queue")):"function"==typeof define&&define.amd?define(["leaflet","geoportal-access-lib","@mapbox/corslite","promise-queue"],e):(t="undefined"!=typeof globalThis?globalThis:t||self).leaflet_trackstats=e(t.L,t.Gp,t.corslite,t.Queue)}(this,(function(t,e,n,i){"use strict";function r(t){return t&&"object"==typeof t&&"default"in t?t:{default:t}}var s=r(t),a=r(e),o=r(n),l=r(i),u={},c=8;function h(t,e){return function(t,e,n){return"".concat(Math.roundE(e,n),"/").concat(Math.roundE(t,n))}(t.lat,t.lng,e)}void 0===Math.roundE&&(Math.roundE=function(t,e){var n=Math.pow(10,e);return Math.round(t*n)/n});var f={setPrecision:function(t){return c=t,this},add:function(t,e){var n=h(e,c);return n in u||(u[n]={}),u[n][t]=e[t],this},get:function(t,e){var n=h(e,c);return n in u&&t in u[n]?u[n][t]:void 0},has:function(t,e){var n=h(e,c);return n in u&&(null===t||t in u[n])},hasZ:function(t){return this.has("z",t)},hasSlope:function(t){return this.has("slope",t)},addZ:function(t){return this.add("z",t),this},addSlope:function(t){return this.add("slope",t),this},getAll:function(t){var e=h(t,c),n=e in u?u[e]:{};return{lat:t.lat,lng:t.lng,z:"z"in n?n.z:void 0,slope:"slope"in n?n.slope:void 0}},clear:function(){return Object.keys(u).forEach((function(t){return delete u[t]})),this}},p=s.default.Class.extend({options:{},initialize:function(t,e){if(s.default.Util.setOptions(this,e),this.startingDistance=0,this.distance=0,this.altMin=Number.MAX_VALUE,this.altMax=Number.MIN_VALUE,this.heightDiffUp=0,this.heightDiffDown=0,this.slopeMin=Number.MAX_VALUE,this.slopeMax=Number.MIN_VALUE,this.slopeTerrainMin=Number.MAX_VALUE,this.slopeTerrainMax=Number.MIN_VALUE,this.latlngs=[],0!==t.length){var n=JSON.parse(JSON.stringify(t));this.altMin=n[0].z,this.altMax=n[0].z,this.slopeTerrainMin=n[0].slope,this.slopeTerrainMax=n[0].slope,n[0].dist=0,n[0].slopeOnTrack=0,this.latlngs.push(n[0]);for(var i=0,r=1;r<n.length;r+=1){var a=s.default.latLng(n[r]).distanceTo(s.default.latLng(this.latlngs[i]));if(a>0){this.distance+=a/1e3,i+=1,this.latlngs[i]=n[r];var o=this.latlngs[i];if(o.dist=this.distance,o.z){o.z<this.altMin&&(this.altMin=o.z),o.z>this.altMax&&(this.altMax=o.z);var l=o.z-this.latlngs[i-1].z;l<0?this.heightDiffDown+=Math.round(-l):l>0&&(this.heightDiffUp+=Math.round(l)),o.slopeOnTrack=Math.round(Math.degrees(Math.atan(l/a)))}else o.slopeOnTrack=0;o.slope&&(o.slope<this.slopeTerrainMin&&(this.slopeTerrainMin=o.slope),o.slope>this.slopeTerrainMax&&(this.slopeTerrainMax=o.slope))}}for(var u=this.latlngs.length,c=0;c<u;c+=1)c>3&&c<u-4&&(this.latlngs[c].slopeOnTrack=(this.latlngs[c-3].slopeOnTrack+2*this.latlngs[c-2].slopeOnTrack+4*this.latlngs[c-1].slopeOnTrack+8*this.latlngs[c].slopeOnTrack+4*this.latlngs[c+1].slopeOnTrack+2*this.latlngs[c+2].slopeOnTrack+this.latlngs[c+3].slopeOnTrack)/22,this.latlngs[c].slopeOnTrack<this.slopeMin&&(this.slopeMin=this.latlngs[c].slopeOnTrack),this.latlngs[c].slopeOnTrack>this.slopeMax&&(this.slopeMax=this.latlngs[c].slopeOnTrack));void 0===this.altMin&&(this.heightDiffUp=void 0,this.heightDiffDown=void 0,this.slopeMax=void 0,this.slopeMin=void 0)}},accumulate:function(t){return t.latlngs=t.latlngs.concat(this.getLatLngs().map((function(e){return e.dist+=t.distance,e}))),t.distance+=this.distance,t.altMin=Math.min(this.altMin,t.altMin),t.altMax=Math.max(this.altMax,t.altMax),t.heightDiffUp+=this.heightDiffUp,t.heightDiffDown+=this.heightDiffDown,t.slopeMin=Math.min(this.slopeMin,t.slopeMin),t.slopeMax=Math.max(this.slopeMax,t.slopeMax),t.slopeTerrainMin=Math.min(this.slopeTerrainMin,t.slopeTerrainMin),t.slopeTerrainMax=Math.max(this.slopeTerrainMax,t.slopeTerrainMax),this},getLatLngs:function(){return JSON.parse(JSON.stringify(this.latlngs))},getDistance:function(){return this.distance},getAltMin:function(){return this.altMin},getAltMax:function(){return this.altMax},getSlopeMin:function(){return this.slopeMin},getSlopeMax:function(){return this.slopeMax},getHeightDiffUp:function(){return this.heightDiffUp},getHeightDiffDown:function(){return this.heightDiffDown},getSlopeTerrainMin:function(){return this.slopeTerrainMin},getSlopeTerrainMax:function(){return this.slopeTerrainMax}});function d(t){var e=t.getLatLngs();if(e.length>0&&Array.isArray(e[0])){for(var n=[],i=0;i<e.length;i+=1)n=n.concat(e[i]);return n}return e}void 0===Math.degrees&&(Math.degrees=function(t){return 180*t/Math.PI}),s.default.Polyline.include({_stats:void 0,getStats:function(){return this._stats},fetchAltitude:function(t,e){if(!("altitudes"in t.features)||!t.features.altitudes)return new Promise((function(t,e){return e(new Error("Unsupported"))}));f.setPrecision(t.precision);var n=Array.from(new Set(d(this))).filter((function(t){return!f.hasZ(t)}));return 0===n.length?new Promise((function(t){return t()})):(e&&e.fire("TrackStats:fetching",{datatype:"altitudes",size:n.length}),new Promise((function(i,r){t.fetchAltitudes(n,e).then((function(t){t.forEach((function(t){return f.addZ(t)})),e&&e.fire("TrackStats:done",{datatype:"altitudes",size:t.length}),i()})).catch((function(t){return r(t)}))})))},fetchSlope:function(t,e){if(!("slopes"in t.features)||!t.features.slopes)return new Promise((function(t,e){return e(new Error("Unsupported"))}));f.setPrecision(t.precision);var n=Array.from(new Set(d(this))).filter((function(t){return!f.hasSlope(t)}));return 0===n.length?new Promise((function(t){return t()})):(e&&e.fire("TrackStats:fetching",{datatype:"slopes",size:n.length}),new Promise((function(i,r){t.fetchSlopes(n,e).then((function(t){t.forEach((function(t){return f.addSlope(t)})),e&&e.fire("TrackStats:done",{datatype:"slopes",size:t.length}),i()})).catch((function(t){return r(t)}))})))},fetchInfos:function(t,e){var n=[];return"altitudes"in t.features&&t.features.altitudes&&n.push(this.fetchAltitude(t,e)),"slopes"in t.features&&t.features.slopes&&n.push(this.fetchSlope(t,e)),Promise.all(n)},computeStats:function(){var t=d(this).map((function(t){return t.getCachedInfos()}));return this._stats=new p(t),this.getStats()}}),s.default.LatLng.prototype.getCachedInfos=function(){return f.getAll(this)},void 0!==s.default.TrackDrawer&&(s.default.TrackDrawer.Track.include({_steps:void 0,_total:void 0,_i:0,_bindEvent:function(){var t=this;this.on("TrackDrawer:start",(function(){t._i+=1})),this.on("TrackDrawer:failed",(function(e){t._i-=1,t._fireEvents&&t.fire("TrackDrawer:statsfailed",{message:e.message})})),this.on("TrackDrawer:done",(function(){t._finalizeRoute(t.options.fetcher).catch((function(e){t._i-=1,t._fireEvents&&t.fire("TrackDrawer:statsfailed",{message:e.message})}))}))},_finalizeRoute:function(t){var e=this,n=[],i=this._getNode(this._firstNodeId);return this._nodesContainers.forEach((function(){do{var t=e._getNext(i),r=t.nextEdge,s=t.nextNode;if(void 0===i||void 0===r)break;n.push(r),i=s}while("stopover"!==i.options.type)})),new Promise((function(i,r){var s=[];n.forEach((function(n){s.push(n.fetchInfos(t,e).then((function(){return n.computeStats()})))})),Promise.all(s).then((function(){e._i-=1,0===e._i&&e._computeStats(),i()})).catch((function(t){return r(t)}))}))},getStatsTotal:function(){return this._total},getStatsSteps:function(){return this._steps},_computeStats:function(){var t=this;this._steps=[],this._total=new p([]);var e=new p([]),n=this._getNode(this._firstNodeId);return void 0!==n&&this._nodesContainers.forEach((function(i,r){n._stats={startingDistance:e.getDistance(),distance:t._total.getDistance(),z:n.getLatLng().getCachedInfos().z},(e=new p([])).startingDistance=t._total.getDistance();do{var s=t._getNext(n),a=s.nextEdge,o=s.nextNode;if(void 0===n||void 0===a)break;var l=a.getStats();void 0!==l&&l.accumulate(t._total).accumulate(e),(n=o)._stats={startingDistance:e.getDistance(),distance:t._total.getDistance(),z:n.getLatLng().getCachedInfos().z}}while("stopover"!==n.options.type);t._edgesContainers.get(r)._stats=e,t._steps.push(e)})),this._fireEvents&&this.fire("TrackDrawer:statsdone",{}),this}}),s.default.TrackDrawer.Track.addInitHook("_bindEvent"));var g=function(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,i=new Array(e);n<e;n++)i[n]=t[n];return i};var v=function(t){if(Array.isArray(t))return g(t)};var M=function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)};var m=function(t,e){if(t){if("string"==typeof t)return g(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?g(t,e):void 0}};var _=function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")};var y=function(t){return v(t)||M(t)||m(t)||_()};var T=s.default.Class.extend({options:{queueConcurrency:5},initialize:function(t,e,n){this._apiKey=t,this._map=e,this.features={altitudes:!0,slopes:!0},this.precision=8,s.default.Util.setOptions(this,n),this._queue=new l.default(this.options.queueConcurrency,1/0)},fetchAltitudes:function(t,e){var n=this,i=[],r=[];if(t.forEach((function(t){if(i.push({lon:t.lng,lat:t.lat}),50===i.length){var s=i.splice(0);r.push(n._queue.add((function(){return n._fetchBatchAltitude(s,e)})))}})),i.length>0){var s=i.splice(0);r.push(this._queue.add((function(){return n._fetchBatchAltitude(s,e)})))}return new Promise((function(t,e){Promise.all(r).then((function(e){var n=[];e.forEach((function(t){return n.push.apply(n,y(t))})),t(n)})).catch((function(t){return e(t)}))}))},_doFetchBatchAltitude:function(t,e,n,i,r){var s=this;a.default.Services.getAltitude({apiKey:this._apiKey,sampling:t.length,positions:t,onSuccess:function(t){var i=[];t.elevations.forEach((function(t){i.push({lat:t.lat,lng:t.lon,z:t.z})})),e&&e.fire("TrackStats:fetched",{datatype:"altitudes",size:i.length}),n(i)},onFailure:function(a){r?s._doFetchBatchAltitude(t,e,n,i,!1):i(new Error(a.message))}})},_fetchBatchAltitude:function(t,e){var n=this;return new Promise((function(i,r){n._doFetchBatchAltitude(t,e,i,r,!0)}))},fetchSlopes:function(t,e){var n=this,i={},r=[],a=this._map?this._map.options.crs:this.options.crs||s.default.CRS.EPSG3857,o=this._map?this._map.getPixelOrigin():this.options.pixelOrigin;return t.forEach((function(t){var e=function(t,e,n,i,r){var s=e.latLngToPoint(t,n).floor(),a=s.divideBy(i).floor(),o=a.multiplyBy(i).subtract(r);return{tile:a,tilePixel:s.subtract(r).subtract(o)}}(t,a,16,256,o),n=e.tile,r=e.tilePixel;n.x in i||(i[n.x]={}),n.y in i[n.x]||(i[n.x][n.y]=[[]]);var s=i[n.x][n.y];s[s.length-1].length>50&&s.push([]),s[s.length-1].push({lat:t.lat,lng:t.lng,x:r.x,y:r.y})})),Object.keys(i).forEach((function(t){Object.keys(i[t]).forEach((function(s){i[t][s].forEach((function(i){r.push(n._queue.add((function(){return n._fetchBatchSlope(t,s,i,e)})))}))}))})),new Promise((function(t,e){Promise.all(r).then((function(e){var n=[];e.forEach((function(t){return n.push.apply(n,y(t))})),t(n)})).catch((function(t){return e(t)}))}))},_fetchBatchSlope:function(t,e,n,i){var r=e,s=t,a="",l="",u="",c="",h=this._apiKey;n.forEach((function(t,e){e>0&&(a+="|",l+="|",u+="|",c+="|"),a+=t.lng.toString(),l+=t.lat.toString(),u+=t.x.toString(),c+=t.y.toString()}));var f="slope.php?tilematrix=".concat(16,"&tilerow=").concat(r,"&tilecol=").concat(s)+"&lon=".concat(a,"&lat=").concat(l,"&x=").concat(u,"&y=").concat(c,"&apikey=").concat(h);return new Promise((function(t,e){o.default(f,(function(n,r){if(n)try{var s=JSON.parse(n.responseText);e(new Error(s.error))}catch(t){e(t)}else try{var a=JSON.parse(r.responseText);if(a.results){var o=[];a.results.forEach((function(t){o.push({lat:t.lat,lng:t.lon,slope:t.slope})})),i&&i.fire("TrackStats:fetched",{datatype:"slopes",size:o.length}),t(o)}else e(new Error("Impossible d'obtenir les données de pentes: résultats invalides"))}catch(t){e(t)}}),!1)}))}}),x=s.default.Class.extend({options:{queueConcurrency:5},initialize:function(t,e,n){this._apiKey=t,this._map=e,this.features={altitudes:!0,slopes:!1},this.precision=6,s.default.Util.setOptions(this,n),this._queue=new l.default(this.options.queueConcurrency,1/0)},fetchAltitudes:function(t,e){var n=this,i=[],r=[];if(t.forEach((function(t){if(i.push({lon:t.lng,lat:t.lat}),50===i.length){var s=i.splice(0);r.push(n._queue.add((function(){return n._fetchBatchAltitude(s,e)})))}})),i.length>0){var s=i.splice(0);r.push(this._queue.add((function(){return n._fetchBatchAltitude(s,e)})))}return new Promise((function(t,e){Promise.all(r).then((function(e){var n=[];e.forEach((function(t){return n.push.apply(n,y(t))})),t(n)})).catch((function(t){return e(t)}))}))},_fetchBatchAltitude:function(t,e){var n=t.map((function(t){return"".concat(t.lat,",").concat(t.lon)})).join(","),i="https://open.mapquestapi.com/elevation/v1/profile?shapeFormat=raw&"+"latLngCollection=".concat(n,"&key=").concat(this._apiKey);return new Promise((function(t,n){o.default(i,(function(i,r){if(i)n(new Error(i.response));else try{var s,a=JSON.parse(r.responseText),o=[],l=!1;if(a.elevationProfile.forEach((function(t,e){-32768===t.height&&(t.height=s,void 0===s&&(l=!0)),o.push({lat:a.shapePoints[2*e],lng:a.shapePoints[2*e+1],z:t.height}),s=t.height})),l)for(var u=o.length-1;u>=0;u-=1)void 0===o[u].z&&(o[u].z=s),s=o[u].z;e&&e.fire("TrackStats:fetched",{datatype:"altitudes",size:o.length}),t(o)}catch(t){n(t)}}),!1)}))},fetchSlopes:function(){return new Promise((function(t,e){e(new Error("Unsupported"))}))}});return s.default.TrackStats={cache:f,Geoportail:T,Mapquest:x,Stats:p,geoportail:function(t,e,n){return new T(t,e,n)},mapquest:function(t,e,n){return new x(t,e,n)}},s.default.TrackStats}));
//# sourceMappingURL=leaflet.trackstats.umd.min.js.map
